name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java-version: [ 8, 11, 17 ]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up JDK ${{ matrix.java-version }}
      uses: actions/setup-java@v3
      with:
        java-version: ${{ matrix.java-version }}
        distribution: 'temurin'
        cache: maven
    
    - name: Validate Maven project
      run: mvn validate
    
    - name: Compile project
      run: mvn clean compile
    
    - name: Run tests
      run: mvn test
    
    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Maven Tests - Java ${{ matrix.java-version }}
        path: target/surefire-reports/*.xml
        reporter: java-junit
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results-java-${{ matrix.java-version }}
        path: target/surefire-reports/

  code-quality:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis
    
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: 11
        distribution: 'temurin'
        cache: maven
    
    - name: Cache SonarCloud packages
      uses: actions/cache@v3
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
    
    - name: Analyze with SonarCloud
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar
        -Dsonar.projectKey=apache-nifi-ftp-connection-pool
        -Dsonar.organization=your-org-name
    
    - name: Check code coverage
      run: |
        mvn jacoco:report
        echo "Code coverage report generated at target/site/jacoco/index.html"
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./target/site/jacoco/jacoco.xml
        flags: unittests
        name: codecov-umbrella

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'apache-nifi-ftp-connection-pool'
        path: '.'
        format: 'HTML'
        args: >
          --enableRetired
          --enableExperimental
    
    - name: Upload OWASP results
      uses: actions/upload-artifact@v3
      with:
        name: dependency-check-report
        path: reports/

  build:
    runs-on: ubuntu-latest
    needs: [test, code-quality, security-scan]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up JDK 8
      uses: actions/setup-java@v3
      with:
        java-version: 8
        distribution: 'temurin'
        cache: maven
    
    - name: Build NAR file
      run: mvn clean package -DskipTests
    
    - name: Upload NAR artifact
      uses: actions/upload-artifact@v3
      with:
        name: nifi-ftp-connection-pool-nar
        path: target/*.nar
    
    - name: Create checksum
      run: |
        cd target
        sha256sum *.nar > checksums.txt
    
    - name: Upload checksum
      uses: actions/upload-artifact@v3
      with:
        name: nar-checksum
        path: target/checksums.txt

  release:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up JDK 8
      uses: actions/setup-java@v3
      with:
        java-version: 8
        distribution: 'temurin'
        cache: maven
        server-id: ossrh
        server-username: MAVEN_USERNAME
        server-password: MAVEN_PASSWORD
    
    - name: Configure GPG
      run: |
        echo "$GPG_PRIVATE_KEY" | base64 --decode | gpg --batch --import
      env:
        GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
    
    - name: Deploy to Maven Central
      run: mvn clean deploy -DskipTests -P release
      env:
        MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
        MAVEN_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}